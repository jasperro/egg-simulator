[gd_resource type="VisualShader" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "saturation"

[sub_resource type="VisualShaderNodeTexture" id=1]
output_port_for_preview = 0
source = 1
texture_type = 1

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "screen_texture"

[sub_resource type="VisualShaderNodeVectorFunc" id=4]
function = 4

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 0.3 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=7]
function = 5

[sub_resource type="VisualShaderNodeVectorCompose" id=8]

[resource]
code = "shader_type canvas_item;
uniform float saturation;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	vec3 n_out3p0;
	n_out3p0 = vec3(SCREEN_UV,0.0);

// Input:4

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 _tex_read = textureLod( SCREEN_TEXTURE , n_out3p0.xy , 0.0 );
		n_out2p0 = _tex_read.rgb;
		n_out2p1 = _tex_read.a;
	}

// VectorFunc:5
	vec3 n_out5p0;
	{
		vec3 c = n_out2p0;
		vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
		vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
		vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
		float d = q.x - min(q.w, q.y);
		float e = 1.0e-10;
		n_out5p0=vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
	}

// VectorDecompose:6
	float n_out6p0;
	float n_out6p1;
	float n_out6p2;
	n_out6p0 = n_out5p0.x;
	n_out6p1 = n_out5p0.y;
	n_out6p2 = n_out5p0.z;

// ScalarUniform:10
	float n_out10p0;
	n_out10p0 = saturation;

// ScalarOp:7
	float n_out7p0;
	n_out7p0 = n_out6p1 * n_out10p0;

// VectorCompose:9
	vec3 n_out9p0;
	n_out9p0 = vec3( n_out6p0 , n_out7p0 , n_out6p2 );

// VectorFunc:8
	vec3 n_out8p0;
	{
		vec3 c = n_out9p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out8p0=c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// Output:0
	COLOR.rgb = n_out8p0;
	COLOR.a = n_out2p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 102, -55 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 500, 160 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 140, 80 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -80, 120 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -120, 200 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 300, 20 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 520, 20 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( 720, 180 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 1040, 40 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( 880, 20 )
nodes/fragment/10/node = SubResource( 9 )
nodes/fragment/10/position = Vector2( 720, 300 )
nodes/fragment/connections = PoolIntArray( 9, 0, 8, 0, 6, 0, 9, 0, 5, 0, 6, 0, 3, 0, 2, 0, 4, 0, 2, 2, 2, 1, 0, 1, 2, 0, 5, 0, 8, 0, 0, 0, 6, 2, 9, 2, 6, 1, 7, 0, 7, 0, 9, 1, 10, 0, 7, 1 )
